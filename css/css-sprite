#!/bin/bash

# Author Marcelo Miranda Carneiro -- mcarneiro@fbiz.com.br | mcarneiro@gmail.com

set -o nounset
set -o errexit
set -o pipefail

ARGS=( "${@:-}" );
UPLOAD_URL='http://css.spritegen.com/api.php?upload';
CREATE_URL='http://css.spritegen.com/api.php?create';
FILE_LIST='';
INPUT_PATH=${1:-./};
OUTPUT='';
CREATED_DATA='';
SESSION_ID='';
TO_SEND=();
# FORMAT AND MESSAGES
getColorId() {
	# color [isbg=""]
	local BG=''
	local COLOR=''
	
	case "${1:-}" in
		'black'|0) COLOR='0' ;;
		'red'|1) COLOR='1' ;;
		'green'|2) COLOR='2' ;;
		'yellow'|3) COLOR='3' ;;
		'blue'|4) COLOR='4' ;;
		'purple'|5) COLOR='5' ;;
		'cyan'|6) COLOR='6' ;;
		'gray'|7) COLOR='7' ;;
	esac
	if [ "$COLOR" ]; then
		BG='3'
	fi
	if [ "${2:-}" -a "$COLOR" ]; then
		BG='4'
	fi
	echo "${BG}${COLOR}"
}
getStyleId() {
	# [style="none"]
	local STYLE=''
	
	case "${1:-}" in
		'bold'|1) STYLE='1' ;;
		'underscore'|4) STYLE='4' ;;
		'blink'|5) STYLE='5' ;;
		'reverse'|7) STYLE='7' ;;
		'concealed'|8) STYLE='8' ;;
		'none'|0|*) STYLE='' ;;
	esac
	echo "$STYLE"
}
getFormatCode() {
	# [color="white" style="none" bgcolor=""]
	local ATTR=(
		"`getColorId \"${3:-}\" 1`"\
		"`getColorId \"${1:-}\"`"\
		"`getStyleId \"${2:-}\"`"
	)
	local OPENTAG=''
	local CLOSETAG='\033[0m'
	local CURR=''
	local i
	# echo \${ATTR[@]}: ${ATTR[@]}
	for(( i=0; i<${#ATTR[@]}; i++ )); do
		CURR=${ATTR[i]}
		if [ -z "$OPENTAG" ]; then
			OPENTAG='\033['
		fi
		if [ -n "$CURR" ]; then
			OPENTAG="${OPENTAG};${CURR}"
		fi
	done
	if [ -n "$OPENTAG" ]; then
		OPENTAG="${OPENTAG}m"
	fi
	echo "${OPENTAG}{txt}$CLOSETAG"
}
format() {
	# text [color="white" style="none" bgcolor=""]
	TXT=`echo ${1:-}`
	echo -e `getFormatCode ${2:-} ${3:-} ${4:-} | awk -F '{txt}' -v t="$TXT" '{print$1't'$2}'`
}

# METHOD UTILITIES
getArg() {
	## get args in the format "-argname=value"
	# arg_name
	# custom_args
	local CURRARG=""
	local HASDASH=""
	local GETNEXTVALUE=""
	local a=""
	local CUSTOM_ARGS=( "${2:-}" )

	if [ -z "$CUSTOM_ARGS" ]; then
		CUSTOM_ARGS=( ${ARGS[@]} )
	fi

	HASDASH=`echo $1 | awk -F "^-+" '{print$2}'`
	if [[ -n "$HASDASH" ]]; then
		
		for(( i=0; i<${#CUSTOM_ARGS[@]}; i++ )); do
			a=${CUSTOM_ARGS[$i]}
			if [ "$a" == "$1" ]; then
				GETNEXTVALUE="1"
				continue;
			fi
			if [[ "$GETNEXTVALUE" == "1" ]]; then
				CURRARG=$a
				break;
			fi
		done
		
	else
		for(( i=0; i<${#CUSTOM_ARGS[@]}; i++ )); do
			a=${CUSTOM_ARGS[$i]}
			CURRARG=`echo $a | awk -F "$1=" '{print$2}'`
			if [ "$CURRARG" != "" ]; then
				break;
			fi
		done
	fi
	echo $CURRARG
}

# log stuff
QUIET=''
WARN=''
log() {
	# text [style]
	if [ -z "$QUIET" ]; then
		local COLOR
		local STYLE
		local MSG=' [LOG]'
		local TXT=${1:-}
		
		case "${2:-}" in
			'success')
				MSG=' [SUCCESS]'
				COLOR='green'
				STYLE='bold'
			;;
			'title')
				MSG=''
				COLOR='white'
				STYLE='bold'
				TXT=`echo $TXT | tr 'a-z' 'A-Z'`
			;;
			'warn')
				MSG=' [WARNING]'
				COLOR='yellow'
			;;
		esac
		
		if [[ -n "$TXT" ]]; then
			MSG="$MSG $TXT"
		else
			MSG=''
		fi
		format "$MSG" "$COLOR" "$STYLE"
	fi
}
warn() {
	# text
	WARN="1"
	log "${1:-}" "warn"
}
success() {
	# text
	log "${1:-}" "success"
}
title() {
	# text
	log "${1:-}" "title"
}
finish() {
	log
	if [ -n "$WARN" ]; then
		warn "FINISHED with some warnings."
	else
		success "FINISHED!"
	fi
	log
}

# arguments
verifyArgumens() {
	OUTPUT="`getArg o`";

	if [ -d $INPUT_PATH ]; then
		CONFIG_FILE="${INPUT_PATH}sprite.config";
		if [ ! -f $CONFIG_FILE ]; then
			ls -l $INPUT_PATH | grep -E "[0-9]{2,2}:[0-9]{2,2}" | grep -E "(jpg|jpeg|gif|png)" | awk '{print$(NF)}' > $CONFIG_FILE;
		fi
	fi

	getConfig $CONFIG_FILE;
	
	if [ -z "$OUTPUT" ]; then
		OUTPUT="../`basename "$INPUT_PATH"`.png";
	fi
}
getConfig() {
	local CUSTOM_ARGS
	if [ -f "${1:-}" ]; then
		FILE_LIST=`cat ${1:-}`;
		# TO_SEND=( ${TO_SEND[@]} `echo $CONTENT | awk -F "#####" '{print$1}'` );
		# local CUSTOM_ARGS="`echo $CONTENT | awk -F "#####" '{print$2}'`"
		# OUTPUT="${INPUT_PATH}`getArg "o" "$CUSTOM_ARGS"`"
	fi
}
getSessionID() {
	SESSION_ID="`curl -si $UPLOAD_URL | grep "PHPSESSID=" | awk -F 'PHPSESSID=' '{print$2}' | awk -F '; path=' '{print$1}'`"
}
upload() {
	log "Uploading image $1";
	if [ -f "${1:-}" ]; then
		local FILENAME="`file $1 | awk -F ':' '{print$1}' | awk -F '/' '{print$(NF)}'`";
		local RETURN_MSG="`curl -s -F img=@$1 -F Filename=$FILENAME $UPLOAD_URL -b PHPSESSID=$SESSION_ID`";
		 # | grep 'Uploaded successfully'
		if [ -z "`echo $RETURN_MSG | grep 'Uploaded successfully'`" ]; then
			warn "failed to upload $FILENAME. Details below:";
			warn "  $RETURN_MSG";
		fi
	fi
}
uploadFiles() {
	IFS=$'\n';
	for a in $FILE_LIST; do
		upload "${INPUT_PATH}`echo $a | awk -F '=' '{print$1}'`";
	done;
	IFS=' ';
}
create() {
	echo `curl -s $CREATE_URL -F output_type=png -F jpeg_quality=75 -F padding=2 -b PHPSESSID=$SESSION_ID`;
}
getCSS() {
	local CSS=`echo $1 | sed "s/^.*\(Generated by.[^\"]*\"\).*$/\1/"`;
	IFS=$'\n';
	for a in $FILE_LIST; do
		local FROM="\\.`echo $a | awk -F '=' '{print$1}' | awk -F '.' '{print$1}' | sed 's/_/-/g'`";
		local TO=`echo $a | awk -F '=' '{print$2}'`;
		if [ ! -z "$TO" ]; then
			CSS=`echo $CSS | sed "s/${FROM}/${TO}/g"`;
		fi
	done;
	IFS=' ';
	echo $CSS | sed 's/\\n/^/g' | tr '^' '\n'; #monster miguÃ©
}
getJSONValue() {
	echo $1 | sed "s/^.*\"$2\":\"\(.[^\"]*\)\".*$/\1/" | sed 's/\\//g';
}
getSprite() {
	SPRITE_URL=`getJSONValue "${1:-}" "url"`;
	curl -s -l $SPRITE_URL > "${INPUT_PATH}${OUTPUT}"
}

# run
verifyArgumens
getSessionID

title "Step 1 - Uploading files."
uploadFiles
CREATED_DATA="`create`"
success "OK";

title "Step 2 - Loading generated image."
getSprite "$CREATED_DATA";
success "OK";

title "Step 3 - Loading generated CSS."
getCSS "$CREATED_DATA";
success "OK";

# echo $OUTPUT
success "Arquivo gerado em ${INPUT_PATH}${OUTPUT}";